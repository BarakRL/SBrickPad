/* 
  AutodriveLogic.txt
  SBrickPad

  Created by Barak Harel on 5/19/17.
  Copyright Â© 2017 Barak Harel. All rights reserved.
*/

/*
enum State {
    case idle
    case driving
    case stopped
    case reversing
}

var didReverseCW = false
var state = State.idle {
 
    didSet {
 
        guard let sbrick = self.sbrick else { return }
        
        switch state {
            
        case .idle:
            sbrick.send(command: .stop(channelId: 0x02))
            sbrick.send(command: .stop(channelId: 0x03))
            
        case .driving:
            self.didReverseCW = false
            sbrick.send(command: .drive(channelId: 0x02, cw: false, power: 255))
            
        case .stopped:
            sbrick.send(command: .stop(channelId: 0x02))
            
        case .reversing:
            self.didReverseCW = !self.didReverseCW
            sbrick.send(command: .stop(channelId: 0x02))
            sbrick.send(command: .drive(channelId: 0x03, cw: didReverseCW, power: 255))
            DispatchQueue.main.asyncAfter(deadline: .now() + 0.5, execute: {
                sbrick.send(command: .drive(channelId: 0x02, cw: true, power: 255))
            })
            
        }
    }
    
}


var adcTimer: Timer?
func startAutodrive() {
    
    guard let sbrick = self.sbrick else { return }
    
    sbrick.send(command: .write(bytes: [0x2C,0x01]))
    
    adcTimer = Timer.scheduledTimer(withTimeInterval: 0.1, repeats: true, block: { [weak self] (timer) in
        
        guard let _self = self else { return }
        guard let sbrick = _self.manager.sbricks.first else { return }
        
        
        sbrick.send(command: .queryADC(channelId: 0x01)) { (bytes) in
            
            let adcValue = bytes.uint16littleEndianValue()/16
            
            print("ADC 01: \(adcValue)")
            
            if adcValue > 250 && _self.state == .idle {
                _self.state = .driving
                
            }
            else if adcValue < 250 && _self.state != .reversing {
                _self.state = .reversing
                
                DispatchQueue.main.asyncAfter(deadline: .now() + 1, execute: {
                    _self.state = .idle
                })
            }
        }
    })
}
*/
